1)FIND THE CHEAPEST BUS FROM A GIVEN SOURCE AND LOCATION
//STORED PROCEDURE
CREATE OR REPLACE PROCEDURE CHEAPEST_BUS(SRC IN JOURNEY.SOURCE%TYPE ,DEST IN JOURNEY.DESTINATION%TYPE) AS 
--Find for a source and destination the cheapest bus cost.
Cursor ALL_JOURNEY 
IS
Select  JOURNEY_ID
from JOURNEY
WHERE SOURCE =SRC AND DESTINATION=DEST;
TEMP JOURNEY.JOURNEY_ID%TYPE;
MIN_COST1 BUS.BUS_COST%TYPE;
MIN_COST BUS.BUS_COST%TYPE DEFAULT 0;

begin

OPEN ALL_JOURNEY;
LOOP
      FETCH ALL_JOURNEY INTO TEMP;
        EXIT WHEN ALL_JOURNEY%NOTFOUND;
        SELECT MIN(BUS_COST) INTO MIN_COST
        FROM BUS 
        WHERE JOURNEY_ID = TEMP;
       
        IF ( MIN_COST1< MIN_COST  ) THEN
           MIN_COST1 := MIN_COST;
        ELSE
        CONTINUE;
        END IF;

END LOOP;
     CLOSE ALL_JOURNEY;
    DBMS_OUTPUT.put_line(MIN_COST1);
    
END CHEAPEST_BUS;


RUN FROM SQL EDITOR CONSOLE:

set serveroutput on;
Begin
CHEAPEST_BUS('DALLAS','HOUSTON');
end;
**********
OUTPUT:
500
***********

2)FIND THE CHEAPEST FLIGHT FROM A GIVEN SOURCE AND LOCATION
//STORED PROCEDURE
CREATE OR REPLACE PROCEDURE CHEAPEST_FLIGHT(SRC IN JOURNEY.SOURCE%TYPE ,DEST IN JOURNEY.DESTINATION%TYPE) AS 
--Find for a source and destination the cheapest FLIGHT cost.
Cursor ALL_JOURNEY 
IS
Select  JOURNEY_ID
from JOURNEY
WHERE SOURCE =SRC AND DESTINATION = DEST;
TEMP JOURNEY.JOURNEY_ID%TYPE;
MIN_COST1 FLIGHT.FLIGHT_COST%TYPE;
MIN_COST FLIGHT.FLIGHT_COST%TYPE DEFAULT 0;

begin
OPEN ALL_JOURNEY;
LOOP
        FETCH ALL_JOURNEY INTO TEMP;
        EXIT WHEN ALL_JOURNEY%NOTFOUND;
        SELECT MIN(FLIGHT_COST) INTO MIN_COST
        FROM FLIGHT
        WHERE JOURNEY_ID = TEMP;  
        IF ( MIN_COST1< MIN_COST  ) THEN
           MIN_COST1 := MIN_COST;
        ELSE
        CONTINUE;
        END IF;
END LOOP;
     CLOSE ALL_JOURNEY;
     DBMS_OUTPUT.put_line(MIN_COST1);
END CHEAPEST_FLIGHT;


RUN FROM SQL EDITOR CONSOLE:

set serveroutput on;
Begin
CHEAPEST_FLIGHT('SAN FRANCISCO','DALLAS');
end;
**********
OUTPUT:
700
************

3)FIND THE CHEAPEST TRAIN FROM A GIVEN SOURCE AND LOCATION
//STORED PROCEDURE
CREATE OR REPLACE PROCEDURE CHEAPEST_TRAIN(SRC IN JOURNEY.SOURCE%TYPE ,DEST IN JOURNEY.DESTINATION%TYPE) AS 
--Find for a source and destination the cheapest FLIGHT cost.
Cursor ALL_JOURNEY 
IS
Select  JOURNEY_ID
from JOURNEY
WHERE SOURCE =SRC AND DESTINATION = DEST;
TEMP JOURNEY.JOURNEY_ID%TYPE;
MIN_COST1 TRAIN.TRAIN_COST%TYPE;
MIN_COST TRAIN.TRAIN_COST%TYPE DEFAULT 0;

begin
OPEN ALL_JOURNEY;
LOOP
        FETCH ALL_JOURNEY INTO TEMP;
        EXIT WHEN ALL_JOURNEY%NOTFOUND;
        SELECT MIN(TRAIN_COST) INTO MIN_COST
        FROM TRAIN
        WHERE JOURNEY_ID = TEMP;  
        IF ( MIN_COST1< MIN_COST  ) THEN
           MIN_COST1 := MIN_COST;
        ELSE
        CONTINUE;
        END IF;
END LOOP;
     CLOSE ALL_JOURNEY;
     DBMS_OUTPUT.put_line(MIN_COST1);
END CHEAPEST_TRAIN;

RUN FROM SQL EDITOR CONSOLE:

set serveroutput on;
Begin
CHEAPEST_FLIGHT('HOUSTON','DALLAS');
end;
************
OUTPUT:
250
*************

4)Find for a customer all the travel details he has made.
CREATE OR REPLACE PROCEDURE CUSTOMER_ALL(CUSTOMER_NO IN CUSTOMER.CUST_ID%TYPE ) AS 
--Find for a customer all the travel details he has made.
Cursor TRAIN_TRAVEL 
IS
Select  TRAIN_TRANS_ID
from TRAIN_INSTANCE
WHERE CUST_ID =CUSTOMER_NO;
TEMP1 TRAIN_INSTANCE.TRAIN_TRANS_ID%TYPE;
Cursor FLIGHT_TRAVEL 
IS
Select  FLIGHT_TRANS_ID
from FLIGHT_INSTANCE
WHERE CUST_ID =CUSTOMER_NO;
TEMP2 FLIGHT_INSTANCE.FLIGHT_TRANS_ID%TYPE;
Cursor BUS_TRAVEL 
IS
Select  BUS_TRANS_ID
from BUS_INSTANCE
WHERE CUST_ID =CUSTOMER_NO;
TEMP3 BUS_INSTANCE.BUS_TRANS_ID%TYPE;
begin
    OPEN TRAIN_TRAVEL;
    FETCH TRAIN_TRAVEL INTO TEMP1;
           DBMS_OUTPUT.put_line(TEMP1);
     CLOSE TRAIN_TRAVEL;
     OPEN FLIGHT_TRAVEL;
    FETCH FLIGHT_TRAVEL INTO TEMP2;
    
           DBMS_OUTPUT.put_line(TEMP2);
     CLOSE FLIGHT_TRAVEL;
      OPEN BUS_TRAVEL;
    FETCH BUS_TRAVEL INTO TEMP3;
     
           DBMS_OUTPUT.put_line(TEMP3);
     CLOSE BUS_TRAVEL;
END CUSTOMER_ALL;

set serveroutput on;
Begin
CUSTOMER_ALL(1);
end;

***********
OUTPUT
1
1
1
***********